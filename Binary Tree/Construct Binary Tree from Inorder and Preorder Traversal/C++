/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    int pre_index;
    unordered_map<int, int> index_map;
    
    TreeNode* helper(int in_left, int in_right, vector<int>& inorder, vector<int>& preorder)
    {
        // there is no sub tree
        if (in_left > in_right) 
            return nullptr;
        
        //Create root and get value
        TreeNode* root = new TreeNode(preorder[pre_index]);

        // Find the root index in inorder
        int index = index_map[root->val];        
        
        pre_index++;
        
        // Create left
        root->left = helper(in_left, index - 1, inorder, preorder);
        
        // Create right
        root->right = helper(index + 1, in_right, inorder, preorder);
        
        return root;
    }
public:  
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        pre_index = 0;

        // Create a has table
        int idx = 0;
        for (int val : inorder) 
            index_map[val] = idx++;

        return helper(0, inorder.size() - 1, inorder, preorder);
    }
};
